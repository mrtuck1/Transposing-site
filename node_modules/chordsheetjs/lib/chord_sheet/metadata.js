'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Metadata = function () {
  function Metadata() {
    var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Metadata);

    this.assign(metadata);
  }

  _createClass(Metadata, [{
    key: 'assign',
    value: function assign(metaData) {
      var _this = this;

      this.rawMetaData = {};

      Object.keys(metaData).forEach(function (key) {
        _this.set(key, metaData[key]);
      });
    }
  }, {
    key: 'set',
    value: function set(name, value) {
      this.optimizedMetaData = null;
      this.extendedMetadata = null;

      if (value && value.constructor && value.constructor.name === 'Array') {
        this.rawMetaData[name] = new Set(value);
        return;
      }

      if (!(name in this.rawMetaData)) {
        this.rawMetaData[name] = new Set();
      }

      this.rawMetaData[name].add(value);
    }
  }, {
    key: 'get',
    value: function get(name) {
      return this.getExtended()[name] || null;
    }
  }, {
    key: 'getAll',
    value: function getAll() {
      if (!this.optimizedMetaData) {
        this.optimizedMetaData = this.getOptimizedMetaData();
      }

      return this.optimizedMetaData;
    }
  }, {
    key: 'getExtended',
    value: function getExtended() {
      if (!this.extendedMetadata) {
        this.extendedMetadata = _extends({}, this.getArrayValues(), this.getAll());
      }

      return this.extendedMetadata;
    }
  }, {
    key: 'getOptimizedMetaData',
    value: function getOptimizedMetaData() {
      var _this2 = this;

      var optimizedMetaData = {};

      Object.keys(this.rawMetaData).forEach(function (key) {
        var valueSet = _this2.rawMetaData[key];
        optimizedMetaData[key] = _this2.optimizeMetaDataValue(valueSet);
      });

      return optimizedMetaData;
    }
  }, {
    key: 'getArrayValues',
    value: function getArrayValues() {
      var _this3 = this;

      var arrayValues = {};

      Object.keys(this.rawMetaData).forEach(function (key) {
        var valueSet = _this3.rawMetaData[key];
        var values = [].concat(_toConsumableArray(valueSet));

        if (values.length <= 1) {
          return;
        }

        values.forEach(function (value, index) {
          arrayValues[key + '.' + (index + 1)] = value;
        });
      });

      return arrayValues;
    }
  }, {
    key: 'optimizeMetaDataValue',
    value: function optimizeMetaDataValue(valueSet) {
      if (valueSet === undefined) {
        return null;
      }

      var values = [].concat(_toConsumableArray(valueSet));

      if (values.length === 1) {
        return values[0];
      }

      return values;
    }
  }, {
    key: 'clone',
    value: function clone() {
      var clonedMetadata = new Metadata();
      clonedMetadata.rawMetaData = _extends({}, this.rawMetaData);
      return clonedMetadata;
    }
  }]);

  return Metadata;
}();

exports.default = Metadata;