"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a parser warning, currently only used by ChordProParser.
 */
var ParserWarning = function () {
  /**
   * @hideconstructor
   */
  function ParserWarning(message, lineNumber) {
    _classCallCheck(this, ParserWarning);

    /**
     * The warning message
     * @member
     * @type {string}
     */
    this.message = message;

    /**
     * The chord sheet line number on which the warning occurred
     * @member
     * @type {integer}
     */
    this.lineNumber = lineNumber;
  }

  /**
   * Returns a stringified version of the warning
   * @returns {string} The string warning
   */


  _createClass(ParserWarning, [{
    key: "toString",
    value: function toString() {
      return "Warning: " + this.message + " on line " + this.lineNumber;
    }
  }]);

  return ParserWarning;
}();

exports.default = ParserWarning;