'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpressionError = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('../constants');

var _metadata = require('../chord_sheet/metadata');

var _metadata2 = _interopRequireDefault(_metadata);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ESCAPED_CHARACTERS = [_constants.CURLY_START, _constants.CURLY_END, _constants.BACK_SLASH, _constants.PIPE];

var ExpressionError = exports.ExpressionError = function (_Error) {
  _inherits(ExpressionError, _Error);

  function ExpressionError(message, column) {
    _classCallCheck(this, ExpressionError);

    var _this = _possibleConstructorReturn(this, (ExpressionError.__proto__ || Object.getPrototypeOf(ExpressionError)).call(this, message));

    _this.name = 'ExpressionError';
    _this.column = column;
    return _this;
  }

  return ExpressionError;
}(Error);

var CompositeExpression = function () {
  function CompositeExpression() {
    _classCallCheck(this, CompositeExpression);

    this.components = [];
  }

  _createClass(CompositeExpression, [{
    key: 'addComponent',
    value: function addComponent(ComponentClass) {
      var component = new ComponentClass();
      component.parent = this;
      this.components.push(component);
      return component;
    }
  }, {
    key: 'evaluate',
    value: function evaluate(context) {
      return this.components.map(function (component) {
        return component.evaluate(context);
      }).join('');
    }
  }, {
    key: 'ternary',
    get: function get() {
      return this.parent.ternary;
    }
  }]);

  return CompositeExpression;
}();

var LiteralExpression = function () {
  function LiteralExpression() {
    _classCallCheck(this, LiteralExpression);

    this.expression = '';
  }

  _createClass(LiteralExpression, [{
    key: 'read',
    value: function read(chr) {
      this.expression += chr;
    }
  }, {
    key: 'evaluate',
    value: function evaluate() {
      return this.expression;
    }
  }, {
    key: 'ternary',
    get: function get() {
      return this.parent.ternary;
    }
  }]);

  return LiteralExpression;
}();

var TernaryExpression = function () {
  function TernaryExpression() {
    _classCallCheck(this, TernaryExpression);

    this.controllingItemExpression = null;
    this.trueExpression = null;
    this.falseExpression = null;
  }

  _createClass(TernaryExpression, [{
    key: 'addControllingItemExpression',
    value: function addControllingItemExpression() {
      this.controllingItemExpression = new LiteralExpression();
      this.controllingItemExpression.parent = this;
      return this.controllingItemExpression;
    }
  }, {
    key: 'addTrueExpression',
    value: function addTrueExpression() {
      this.trueExpression = new CompositeExpression();
      this.trueExpression.parent = this;
      return this.trueExpression;
    }
  }, {
    key: 'addFalseExpression',
    value: function addFalseExpression() {
      this.falseExpression = new CompositeExpression();
      this.falseExpression.parent = this;
      return this.falseExpression;
    }
  }, {
    key: 'evaluate',
    value: function evaluate(context) {
      var controllingItemName = this.getControllingItemName(context);
      var controllingItem = this.getMetadata(controllingItemName, context);

      if (controllingItem.length) {
        return this.evaluatePresentControllingItem(controllingItem, context);
      }

      return this.evaluateAbsentControllingItem(controllingItemName, context);
    }
  }, {
    key: 'getControllingItemName',
    value: function getControllingItemName(context) {
      var controllingItemName = this.controllingItemExpression.evaluate(context);

      if (controllingItemName === '') {
        controllingItemName = this.parent.ternary.controllingItemExpression.evaluate(context);
      }

      return controllingItemName;
    }
  }, {
    key: 'evaluatePresentControllingItem',
    value: function evaluatePresentControllingItem(controllingItem, context) {
      if (this.trueExpression) {
        return this.trueExpression.evaluate(context);
      }

      return controllingItem;
    }
  }, {
    key: 'evaluateAbsentControllingItem',
    value: function evaluateAbsentControllingItem(controllingItemName, context) {
      if (this.falseExpression) {
        return this.falseExpression.evaluate(context);
      }

      if (this.trueExpression) {
        return '';
      }

      throw new ExpressionError('Unknown metadata \'' + controllingItemName + '\'');
    }
  }, {
    key: 'getMetadata',
    value: function getMetadata(key, context) {
      var metadata = context.metadata,
          settings = context.settings;

      var value = metadata.get(key);

      if (!value) {
        return '';
      }

      var constructor = value.constructor;


      if (constructor && constructor.name === 'Array') {
        return value.join(settings['metadata.separator'] || ',');
      }

      return '' + value;
    }
  }, {
    key: 'ternary',
    get: function get() {
      return this;
    }
  }]);

  return TernaryExpression;
}();

var ChordProExpression = function () {
  function ChordProExpression(expression) {
    _classCallCheck(this, ChordProExpression);

    this.expression = expression;
    this.root = new CompositeExpression();
    this.root.parent = this;
    this.currentComponent = this.root.addComponent(LiteralExpression);
  }

  _createClass(ChordProExpression, [{
    key: 'evaluate',
    value: function evaluate() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$metadata = _ref.metadata,
          metadata = _ref$metadata === undefined ? new _metadata2.default() : _ref$metadata,
          _ref$settings = _ref.settings,
          settings = _ref$settings === undefined ? {} : _ref$settings;

      this.parseExpression(this.expression);

      try {
        return this.root.evaluate({ metadata: metadata, settings: settings });
      } catch (error) {
        throw this.supplementError(error);
      }
    }
  }, {
    key: 'supplementError',
    value: function supplementError(error) {
      if (error.name === 'ExpressionError') {
        return new ExpressionError(error.message, this.column);
      }

      return error;
    }
  }, {
    key: 'parseExpression',
    value: function parseExpression(expression) {
      this.column = 0;

      for (var count = expression.length; this.column < count; this.column += 1) {
        this.read(expression[this.column], expression[this.column + 1]);
      }
    }
  }, {
    key: 'skipNext',
    value: function skipNext() {
      this.column += 1;
    }
  }, {
    key: 'read',
    value: function read(chr, nextChr) {
      if (chr === _constants.BACK_SLASH) {
        this.readBackSlash(chr, nextChr);
      } else if (chr === _constants.PIPE) {
        this.readPipe();
      } else if (chr === _constants.PERCENT) {
        this.readPercent(chr, nextChr);
      } else if (chr === _constants.CURLY_END) {
        this.readExpressionEnd();
      } else {
        this.readLiteral(chr);
      }
    }
  }, {
    key: 'readBackSlash',
    value: function readBackSlash(chr, nextChr) {
      if (ESCAPED_CHARACTERS.indexOf(nextChr) === -1) {
        this.currentComponent.read(chr);
      }

      this.currentComponent.read(nextChr);
      this.skipNext();
    }
  }, {
    key: 'readPipe',
    value: function readPipe() {
      this.currentComponent = this.addNextTernaryExpressionComponent(this.currentComponent.ternary);
    }
  }, {
    key: 'readPercent',
    value: function readPercent(chr, nextChr) {
      if (nextChr === _constants.CURLY_START) {
        this.readExpressionStart();
      } else {
        this.readLiteral(chr);
      }
    }
  }, {
    key: 'readExpressionStart',
    value: function readExpressionStart() {
      var ternaryExpression = this.currentComponent.parent.addComponent(TernaryExpression);
      this.currentComponent = ternaryExpression.addControllingItemExpression();
      this.skipNext();
    }
  }, {
    key: 'readExpressionEnd',
    value: function readExpressionEnd() {
      this.currentComponent = this.currentComponent.ternary.parent.addComponent(LiteralExpression);
    }
  }, {
    key: 'readLiteral',
    value: function readLiteral(chr) {
      this.currentComponent.read(chr);
    }
  }, {
    key: 'addNextTernaryExpressionComponent',
    value: function addNextTernaryExpressionComponent(ternaryExpression) {
      var controllingItemExpression = ternaryExpression.controllingItemExpression,
          trueExpression = ternaryExpression.trueExpression,
          falseExpression = ternaryExpression.falseExpression;


      if (controllingItemExpression === null) {
        return ternaryExpression.addControllingItemExpression();
      } else if (trueExpression === null) {
        return ternaryExpression.addTrueExpression().addComponent(LiteralExpression);
      } else if (falseExpression === null) {
        return ternaryExpression.addFalseExpression().addComponent(LiteralExpression);
      }

      throw new ExpressionError('Unexpected \'|\', expected end of ternary expression', this.column);
    }
  }]);

  return ChordProExpression;
}();

exports.default = ChordProExpression;