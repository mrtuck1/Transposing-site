'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chord_lyrics_pair = require('../chord_sheet/chord_lyrics_pair');

var _chord_lyrics_pair2 = _interopRequireDefault(_chord_lyrics_pair);

var _tag = require('../chord_sheet/tag');

var _tag2 = _interopRequireDefault(_tag);

var _utilities = require('../utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Formats a sonf into a plain text chord sheet
 */
var TextFormatter = function () {
  function TextFormatter() {
    _classCallCheck(this, TextFormatter);
  }

  _createClass(TextFormatter, [{
    key: 'format',

    /**
     * Formats a song into a plain text chord sheet
     * @param {Song} song The song to be formatted
     * @returns {string} the chord sheet
     */
    value: function format(song) {
      return [this.formatHeader(song), this.formatParagraphs(song)].join('');
    }
  }, {
    key: 'formatHeader',
    value: function formatHeader(song) {
      var title = song.title,
          subtitle = song.subtitle;

      var separator = title || subtitle ? '\n' : '';

      return [this.formatTitle(title), this.formatSubTitle(subtitle), separator].join('');
    }
  }, {
    key: 'formatParagraphs',
    value: function formatParagraphs(song) {
      var _this = this;

      return song.paragraphs.map(function (paragraph) {
        return _this.formatParagraph(paragraph);
      }).join('\n\n');
    }
  }, {
    key: 'formatParagraph',
    value: function formatParagraph(paragraph) {
      var _this2 = this;

      var renderableLines = paragraph.lines.filter(function (line) {
        return line.hasRenderableItems();
      });
      var formattedLines = renderableLines.map(function (line) {
        return _this2.formatLine(line);
      });
      return formattedLines.join('\n');
    }
  }, {
    key: 'formatLine',
    value: function formatLine(line) {
      var parts = [this.formatLineTop(line), this.formatLineBottom(line)];

      return parts.filter(function (i) {
        return i !== null;
      }).map(function (part) {
        return part.trimRight();
      }).join('\n');
    }
  }, {
    key: 'formatTitle',
    value: function formatTitle(title) {
      if (title) {
        return title.toUpperCase() + '\n';
      }

      return '';
    }
  }, {
    key: 'formatSubTitle',
    value: function formatSubTitle(subtitle) {
      if (subtitle) {
        return subtitle + '\n';
      }

      return '';
    }
  }, {
    key: 'formatLineTop',
    value: function formatLineTop(line) {
      if ((0, _utilities.hasChordContents)(line)) {
        return this.formatLineWithFormatter(line, this.formatItemTop);
      }

      return null;
    }
  }, {
    key: 'chordLyricsPairLength',
    value: function chordLyricsPairLength(chordLyricsPair) {
      var chords = chordLyricsPair.chords;
      var chordsLength = chords.length;
      var lyricsLength = chordLyricsPair.lyrics.length;

      if (chordsLength >= lyricsLength) {
        return chordsLength + 1;
      }

      return Math.max(chordsLength, lyricsLength);
    }
  }, {
    key: 'formatItemTop',
    value: function formatItemTop(item) {
      if (item instanceof _tag2.default && item.isRenderable()) {
        return (0, _utilities.padLeft)('', item.value);
      }

      if (item instanceof _chord_lyrics_pair2.default) {
        return (0, _utilities.padLeft)(item.chords, this.chordLyricsPairLength(item));
      }

      return '';
    }
  }, {
    key: 'formatLineBottom',
    value: function formatLineBottom(line) {
      if ((0, _utilities.hasTextContents)(line)) {
        return this.formatLineWithFormatter(line, this.formatItemBottom);
      }

      return null;
    }
  }, {
    key: 'formatLineWithFormatter',
    value: function formatLineWithFormatter(line, formatter) {
      var _this3 = this;

      return line.items.map(function (item) {
        return formatter.call(_this3, item);
      }).join('');
    }
  }, {
    key: 'formatItemBottom',
    value: function formatItemBottom(item) {
      if (item instanceof _tag2.default && item.isRenderable()) {
        return item.value;
      }

      if (item instanceof _chord_lyrics_pair2.default) {
        return (0, _utilities.padLeft)(item.lyrics, this.chordLyricsPairLength(item));
      }

      return '';
    }
  }]);

  return TextFormatter;
}();

exports.default = TextFormatter;