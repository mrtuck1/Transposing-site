'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tag = require('../chord_sheet/tag');

var _tag2 = _interopRequireDefault(_tag);

var _chord_lyrics_pair = require('../chord_sheet/chord_lyrics_pair');

var _chord_lyrics_pair2 = _interopRequireDefault(_chord_lyrics_pair);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NEW_LINE = '\n';

/**
 * Formats a song into a ChordPro chord sheet
 */

var ChordProFormatter = function () {
  function ChordProFormatter() {
    _classCallCheck(this, ChordProFormatter);
  }

  _createClass(ChordProFormatter, [{
    key: 'format',

    /**
     * Formats a song into a ChordPro chord sheet.
     * @param {Song} song The song to be formatted
     * @returns {string} The ChordPro string
     */
    value: function format(song) {
      var _this = this;

      return song.lines.map(function (line) {
        return _this.formatLine(line);
      }).join(NEW_LINE);
    }
  }, {
    key: 'formatLine',
    value: function formatLine(line) {
      var _this2 = this;

      return line.items.map(function (item) {
        return _this2.formatItem(item);
      }).join('');
    }
  }, {
    key: 'formatItem',
    value: function formatItem(item) {
      if (item instanceof _tag2.default) {
        return this.formatTag(item);
      } else if (item instanceof _chord_lyrics_pair2.default) {
        return this.formatChordLyricsPair(item);
      }

      return '';
    }
  }, {
    key: 'formatTag',
    value: function formatTag(tag) {
      if (tag.hasValue()) {
        return '{' + tag.originalName + ': ' + tag.value + '}';
      }

      return '{' + tag.originalName + '}';
    }
  }, {
    key: 'formatChordLyricsPair',
    value: function formatChordLyricsPair(chordLyricsPair) {
      return [this.formatChordLyricsPairChords(chordLyricsPair), this.formatChordLyricsPairLyrics(chordLyricsPair)].join('');
    }
  }, {
    key: 'formatChordLyricsPairChords',
    value: function formatChordLyricsPairChords(chordLyricsPair) {
      if (chordLyricsPair.chords) {
        return '[' + chordLyricsPair.chords + ']';
      }

      return '';
    }
  }, {
    key: 'formatChordLyricsPairLyrics',
    value: function formatChordLyricsPairLyrics(chordLyricsPair) {
      return chordLyricsPair.lyrics || '';
    }
  }]);

  return ChordProFormatter;
}();

exports.default = ChordProFormatter;